{"version":3,"file":"static/js/223.4449ac7d.chunk.js","mappings":"iNAEaA,E,QAAOC,GAAAA,GAAH,+F,SCGJC,EAAU,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACL,EAAD,UACGG,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,GAAIC,EAAvB,EAAuBA,YAAvB,OACV,yBACE,UAAC,KAAD,CACEC,GAA0B,YAAtBN,EAASO,SAAT,UAAqCH,GAArC,kBAAuDA,GAC3DI,MAAO,CAAEC,KAAMT,GAFjB,WAIE,gBAAKU,KAAKC,EAAAA,EAAAA,GAAYN,GAAcO,IAAKb,EAAOc,QAC/CV,MANIC,U,sGCXV,IAAMU,EACX,6EAEWC,EAAiB,kCACjBC,EAAkB,mC,yGCFlBC,EAAW,SAACC,EAAWC,GAClC,OAA0BC,EAAAA,EAAAA,YAA1B,eAAOZ,EAAP,KAAca,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,2FACnBJ,GAAW,GADQ,kBAGEL,IAHF,OAGXU,EAHW,OAKjBP,EAASO,GALQ,gDAOjBH,EAAS,KAAMI,SAPE,yBASjBN,GAAW,GATM,4EAAH,qDAYlBI,MAECR,GAEI,CAACX,EAAOc,EAASE,I,wJCtBbM,EAAQjC,EAAAA,GAAAA,GAAH,oE,GAKEA,EAAAA,GAAAA,GAAH,+F,QCDJkC,EAAW,WACtB,OAAiCd,EAAAA,EAAAA,IAAS,kBAAMe,EAAAA,EAAAA,QAAuB,IAAvE,eAAOjC,EAAP,KAAeuB,EAAf,KAAwBE,EAAxB,KAEA,OAAIA,GAAc,wBAAKA,IACnBF,GAAgB,SAACW,EAAA,EAAD,KAGlB,iCACE,SAACH,EAAD,6BACC/B,IAAU,SAACD,EAAA,EAAD,CAASC,OAAQA,EAAOmC,e,yMCbzCC,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CAAEC,QAAS,oCAE5B,IAAMJ,EAAmB,mCAAG,oGACVG,IAAAA,IAAU,uBADA,cAC3BE,EAD2B,yBAE1BA,EAAST,MAFiB,2CAAH,qDAKnBU,EAAc,mCAAG,WAAMlC,GAAN,uFACL+B,IAAAA,IAAA,iBAAoB/B,IADf,cACtBiC,EADsB,yBAErBA,EAAST,MAFY,2CAAH,sDAKdW,EAAS,mCAAG,WAAMnC,GAAN,uFACA+B,IAAAA,IAAA,iBAAoB/B,EAApB,aADA,cACjBiC,EADiB,yBAEhBA,EAAST,MAFO,2CAAH,sDAKTY,EAAiB,mCAAG,WAAMpC,GAAN,uFACR+B,IAAAA,IAAA,iBAAoB/B,EAApB,aADQ,cACzBiC,EADyB,yBAExBA,EAAST,MAFe,2CAAH,sDAKjBa,EAAgB,mCAAG,WAAMC,GAAN,uFACPP,IAAAA,IAAA,gBAA2B,CAAEQ,OAAQ,CAAED,MAAAA,KADhC,cACxBL,EADwB,yBAEvBA,EAAST,MAFc,2CAAH,uD,mECvBhBjB,EAAc,SAAAN,GACzB,OACKA,EADEA,EACYU,EAAAA,GAAoBV,EACpBS,EAAAA","sources":["components/Gallery/Gallery.styled.jsx","components/Gallery/Gallery.jsx","constants/path.js","hooks/useFetch.js","pages/HomePage/HomePage.styled.jsx","pages/HomePage/HomePage.jsx","services/movieApi.js","utils/checkPoster.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { checkPoster } from '../../utils';\nimport { List } from './Gallery.styled';\n\nexport const Gallery = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ original_title, id, poster_path }) => (\n        <li key={id}>\n          <Link\n            to={location.pathname === '/movies' ? `${id}` : `/movies/${id}`}\n            state={{ from: location }}\n          >\n            <img src={checkPoster(poster_path)} alt={movies.title}></img>\n            {original_title}\n          </Link>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      original_title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","export const NO_IMAGE =\n  'https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg';\nexport const IMAGE_PATH_ORIGINAL = `https://image.tmdb.org/t/p/original`;\nexport const IMAGE_PATH_POSTER = `https://image.tmdb.org/t/p/w500`;\nexport const IMAGE_PATH_PROFILE = `https://image.tmdb.org/t/p/w185`;\n","import { useEffect, useState } from 'react';\n\nexport const useFetch = (requestFn, deps) => {\n  const [state, setState] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const asyncRequest = async () => {\n      setLoading(true);\n      try {\n        const data = await requestFn();\n        // console.log('useEffect', data);\n        setState(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    asyncRequest();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  // console.log(state, 'after useEffect');\n  return [state, loading, error];\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  font-size: 30px;\n  margin-bottom: 10px;\n`;\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 20px;\n`;\n","import { useFetch } from '../../hooks';\nimport { fetchTrendingMovies } from '../../services/movieApi';\nimport { Gallery } from '../../components/Gallery';\nimport { Loader } from '../../components/ui/Loader';\nimport { Title } from './HomePage.styled';\n\nexport const HomePage = () => {\n  const [movies, loading, error] = useFetch(() => fetchTrendingMovies(), []);\n\n  if (error) return <h1>{error}</h1>;\n  if (loading) return <Loader />;\n\n  return (\n    <>\n      <Title>Trending Movie</Title>\n      {movies && <Gallery movies={movies.results} />}\n    </>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: '5e25dc89cc9570e2f881766abec20685' };\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day');\n  return response.data;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(`/movie/${id}`);\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(`/movie/${id}/credits`);\n  return response.data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n\nexport const fetchSearchMovie = async query => {\n  const response = await axios.get(`/search/movie`, { params: { query } });\n  return response.data;\n};\n","import { IMAGE_PATH_POSTER, NO_IMAGE } from '../constants';\n\nexport const checkPoster = poster_path => {\n  return poster_path\n    ? (poster_path = IMAGE_PATH_POSTER + poster_path)\n    : (poster_path = NO_IMAGE);\n};\n"],"names":["List","styled","Gallery","movies","location","useLocation","map","original_title","id","poster_path","to","pathname","state","from","src","checkPoster","alt","title","NO_IMAGE","IMAGE_PATH_POSTER","IMAGE_PATH_PROFILE","useFetch","requestFn","deps","useState","setState","loading","setLoading","error","setError","useEffect","asyncRequest","data","message","Title","HomePage","fetchTrendingMovies","Loader","results","axios","api_key","response","fetchMovieById","fetchCast","fetchMovieReviews","fetchSearchMovie","query","params"],"sourceRoot":""}