{"version":3,"file":"static/js/68.fea07ce2.chunk.js","mappings":"qNAAO,IAAMA,EACX,6EAEWC,EAAiB,kCACjBC,EAAkB,mC,yGCFlBC,EAAW,SAACC,EAAWC,GAClC,OAA0BC,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,2FACnBJ,GAAW,GADQ,kBAGEN,IAHF,OAGXW,EAHW,OAKjBP,EAASO,GALQ,gDAOjBH,EAAS,KAAMI,SAPE,yBASjBN,GAAW,GATM,4EAAH,qDAYlBI,MAECT,GAEI,CAACE,EAAOE,EAASE,I,4ICtBbM,EAAOC,EAAAA,GAAAA,GAAH,gIAOJC,EAAOD,EAAAA,GAAAA,GAAH,oGAKJE,EAAQF,EAAAA,GAAAA,IAAH,wC,SCVLG,EAAW,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACzB,OACE,8BACGA,EAAKC,QACJ,SAACN,EAAD,UACGK,EAAKE,KAAI,YAA4C,ICP/BC,EDOVC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAChC,OACE,UAACV,EAAD,YACE,SAACC,EAAD,CAAOU,KCVUL,EDUaI,ECRvCJ,EADEA,EACYvB,EAAAA,GAAqBuB,EACrBzB,EAAAA,IDOwC+B,IAAKJ,KAClD,uBAAIA,KACJ,uBAAIC,MAHKF,SASjB,8C,oBEdKM,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA+B9B,EAAAA,EAAAA,IAAS,kBAAMgC,EAAAA,EAAAA,GAAUF,KAAU,CAACA,IAAnE,eAAOlB,EAAP,KAAaN,EAAb,KAAsBE,EAAtB,KAEA,OAAIF,GAAgB,SAAC2B,EAAA,EAAD,IAChBzB,GAAc,wBAAKA,KAEhB,8BAAGI,IAAQ,SAACM,EAAD,CAAUC,KAAMP,EAAKO,W,yMCXzCe,IAAAA,SAAAA,QAAyB,+BACzBA,IAAAA,SAAAA,OAAwB,CAAEC,QAAS,oCAE5B,IAAMC,EAAmB,mCAAG,oGACVF,IAAAA,IAAU,uBADA,cAC3BG,EAD2B,yBAE1BA,EAASzB,MAFiB,2CAAH,qDAKnB0B,EAAc,mCAAG,WAAMf,GAAN,uFACLW,IAAAA,IAAA,iBAAoBX,IADf,cACtBc,EADsB,yBAErBA,EAASzB,MAFY,2CAAH,sDAKdoB,EAAS,mCAAG,WAAMT,GAAN,uFACAW,IAAAA,IAAA,iBAAoBX,EAApB,aADA,cACjBc,EADiB,yBAEhBA,EAASzB,MAFO,2CAAH,sDAKT2B,EAAiB,mCAAG,WAAMhB,GAAN,uFACRW,IAAAA,IAAA,iBAAoBX,EAApB,aADQ,cACzBc,EADyB,yBAExBA,EAASzB,MAFe,2CAAH,sDAKjB4B,EAAgB,mCAAG,WAAMC,GAAN,uFACPP,IAAAA,IAAA,gBAA2B,CAAEQ,OAAQ,CAAED,MAAAA,KADhC,cACxBJ,EADwB,yBAEvBA,EAASzB,MAFc,2CAAH","sources":["constants/path.js","hooks/useFetch.js","components/CastList/CastList.styled.jsx","components/CastList/CastList.jsx","utils/checkProfilePhoto.js","pages/MovieDetailsPage/Cast/Cast.jsx","services/movieApi.js"],"sourcesContent":["export const NO_IMAGE =\n  'https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg';\nexport const IMAGE_PATH_ORIGINAL = `https://image.tmdb.org/t/p/original`;\nexport const IMAGE_PATH_POSTER = `https://image.tmdb.org/t/p/w500`;\nexport const IMAGE_PATH_PROFILE = `https://image.tmdb.org/t/p/w185`;\n","import { useEffect, useState } from 'react';\n\nexport const useFetch = (requestFn, deps) => {\n  const [state, setState] = useState();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const asyncRequest = async () => {\n      setLoading(true);\n      try {\n        const data = await requestFn();\n        // console.log('useEffect', data);\n        setState(data);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    asyncRequest();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  // console.log(state, 'after useEffect');\n  return [state, loading, error];\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 10px;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr 1fr 1fr;\n  gap: 15px;\n`;\n\nexport const Item = styled.li`\n  /* display: flex;\n  justify-content: center;\n  align-items: center; */\n`;\nexport const Image = styled.img`\n  width: 80px;\n`;\n","import PropTypes from 'prop-types';\nimport { checkProfilePhoto } from '../../utils';\nimport { Image, List, Item } from './CastList.styled';\n\nexport const CastList = ({ cast }) => {\n  return (\n    <>\n      {cast.length ? (\n        <List>\n          {cast.map(({ id, name, character, profile_path }) => {\n            return (\n              <Item key={id}>\n                <Image src={checkProfilePhoto(profile_path)} alt={name} />\n                <p>{name}</p>\n                <p>{character}</p>\n              </Item>\n            );\n          })}\n        </List>\n      ) : (\n        <p>Nothing to show</p>\n      )}\n    </>\n  );\n};\n\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n","import { IMAGE_PATH_PROFILE, NO_IMAGE } from '../constants';\n\nexport const checkProfilePhoto = poster_path => {\n  return poster_path\n    ? (poster_path = IMAGE_PATH_PROFILE + poster_path)\n    : (poster_path = NO_IMAGE);\n};\n","import { useParams } from 'react-router-dom';\nimport { useFetch } from '../../../hooks';\nimport { CastList } from '../../../components/CastList/';\nimport { Loader } from '../../../components/ui/Loader';\nimport { fetchCast } from '../../../services/movieApi';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [data, loading, error] = useFetch(() => fetchCast(movieId), [movieId]);\n\n  if (loading) return <Loader />;\n  if (error) return <h1>{error}</h1>;\n\n  return <>{data && <CastList cast={data.cast}></CastList>}</>;\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: '5e25dc89cc9570e2f881766abec20685' };\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day');\n  return response.data;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(`/movie/${id}`);\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(`/movie/${id}/credits`);\n  return response.data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n\nexport const fetchSearchMovie = async query => {\n  const response = await axios.get(`/search/movie`, { params: { query } });\n  return response.data;\n};\n"],"names":["NO_IMAGE","IMAGE_PATH_POSTER","IMAGE_PATH_PROFILE","useFetch","requestFn","deps","useState","state","setState","loading","setLoading","error","setError","useEffect","asyncRequest","data","message","List","styled","Item","Image","CastList","cast","length","map","poster_path","id","name","character","profile_path","src","alt","Cast","movieId","useParams","fetchCast","Loader","axios","api_key","fetchTrendingMovies","response","fetchMovieById","fetchMovieReviews","fetchSearchMovie","query","params"],"sourceRoot":""}