{"version":3,"file":"static/js/773.89bb0613.chunk.js","mappings":"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","sources":["components/Gallery/Gallery.styled.jsx","components/Gallery/Gallery.jsx","constants/path.js","components/SearchForm/SearchForm.jsx","pages/MoviesPage/MoviesPage.jsx","services/movieApi.js","utils/checkPoster.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 20px;\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { checkPoster } from '../../utils';\nimport { List } from './Gallery.styled';\n\nexport const Gallery = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {movies.map(({ original_title, id, poster_path }) => (\n        <li key={id}>\n          <Link\n            to={location.pathname === '/movies' ? `${id}` : `/movies/${id}`}\n            state={{ from: location }}\n          >\n            <img src={checkPoster(poster_path)} alt={movies.title}></img>\n            {original_title}\n          </Link>\n        </li>\n      ))}\n    </List>\n  );\n};\n\nGallery.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      original_title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","export const NO_IMAGE =\n  'https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg';\nexport const IMAGE_PATH_ORIGINAL = `https://image.tmdb.org/t/p/original`;\nexport const IMAGE_PATH_POSTER = `https://image.tmdb.org/t/p/w500`;\nexport const IMAGE_PATH_PROFILE = `https://image.tmdb.org/t/p/w185`;\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\nexport const SearchForm = ({ onSearch, query }) => {\n  const [input, setInput] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSearch({ query: input });\n  };\n\n  useEffect(() => {\n    if (query) {\n      setInput(query);\n    }\n  }, [query]);\n\n  return (\n    <>\n      <form action=\"\">\n        <input\n          name=\"search\"\n          type=\"text\"\n          value={input}\n          onChange={e => setInput(e.target.value.trim())}\n        />\n        <button type=\"submit\" onClick={handleSubmit}>\n          Search\n        </button>\n      </form>\n    </>\n  );\n};\n\nSearchForm.propTypes = {\n  onSearch: PropTypes.func.isRequired,\n  query: PropTypes.string,\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearchMovie } from '../../services/movieApi';\nimport { Loader } from '../../components/ui/Loader';\nimport { SearchForm } from '../../components/SearchForm';\nimport { Gallery } from '../../components/Gallery/';\n\nexport const MoviesPage = () => {\n  const [search, setSearch] = useSearchParams();\n\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const query = search.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n\n    const getData = async () => {\n      setLoading(true);\n      try {\n        const { results } = await fetchSearchMovie(query);\n        setMovies(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getData();\n  }, [query, search]);\n\n  if (error) {\n    return <h2>{error}</h2>;\n  }\n\n  return (\n    <>\n      <SearchForm onSearch={setSearch} query={query} />\n      {loading ? <Loader /> : movies && <Gallery movies={movies} />}\n    </>\n  );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = { api_key: '5e25dc89cc9570e2f881766abec20685' };\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/day');\n  return response.data;\n};\n\nexport const fetchMovieById = async id => {\n  const response = await axios.get(`/movie/${id}`);\n  return response.data;\n};\n\nexport const fetchCast = async id => {\n  const response = await axios.get(`/movie/${id}/credits`);\n  return response.data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n\nexport const fetchSearchMovie = async query => {\n  const response = await axios.get(`/search/movie`, { params: { query } });\n  return response.data;\n};\n","import { IMAGE_PATH_POSTER, NO_IMAGE } from '../constants';\n\nexport const checkPoster = poster_path => {\n  return poster_path\n    ? (poster_path = IMAGE_PATH_POSTER + poster_path)\n    : (poster_path = NO_IMAGE);\n};\n"],"names":["List","styled","Gallery","movies","location","useLocation","map","original_title","id","poster_path","to","pathname","state","from","src","checkPoster","alt","title","NO_IMAGE","IMAGE_PATH_POSTER","IMAGE_PATH_PROFILE","SearchForm","onSearch","query","useState","input","setInput","useEffect","action","name","type","value","onChange","e","target","trim","onClick","preventDefault","MoviesPage","useSearchParams","search","setSearch","setMovies","loading","setLoading","error","setError","get","getData","fetchSearchMovie","results","message","Loader","axios","api_key","fetchTrendingMovies","response","data","fetchMovieById","fetchCast","fetchMovieReviews","params"],"sourceRoot":""}